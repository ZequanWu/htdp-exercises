(require 2htdp/abstraction)

;exercise 419
(define (gcd-structural small large)
  (largest-common (divisors smaller smaller) (divisors small large)))
 
; N[>= 1] N[>= 1] -> [List-of N]
; computes the list of divisors of l smaller or equal to k
(define (divisors k l)
  (local ((define (d count)
            (cond
              [(= count k) (if (zero? (remainder l count))
                               (list count)
                               '())]
              [else (append (if (zero? (remainder l count))
                                (list count)
                                '())
                            (d (add1 count)))])))
    (d 1)))
 
; [List-of N] [List-of N] -> N
; finds the largest number common to both k and l
(define (largest-common k l)
  (for*/or ((i (reverse k)) (j (reverse l)))
    (if (= i j)
        i
        false)))
        
; exercise 428
(define (f n l)
  (cond
    [(or (empty? l) (zero? n)) '()]
    [else (cons (first l)
                (f (sub1 n) (rest l)))]))

(define (remove-items n l)
  (cond
    [(empty? l) '()]
    [(zero? n) l]
    [else (remove-items (sub1 n) (rest l))]))

(define (create-matrix n l)
  (cond
    [(empty? l) '()]
    [else (cons (f n l)
                (create-matrix n (remove-items n l)))]))

(define (create-list n)
  (cond
    [(zero? n) '()]
    [else (append (create-list (sub1 n))
                  (list n))]))
