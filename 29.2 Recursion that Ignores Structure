; exercise 398
(define (partition s n)
  (cond
    [(or (> n (string-length s)) (< n 2)) (cons s '())]
    [else (cons (substring s 0 n)
                (partition (substring s n) n))]))
                
; [List-of Number] -> [List-of Number]
; creates a list of numbers with the same numbers as
; alon, sorted in ascending order
(define (quick-sort alon)
  (cond
    [(< (length alon) 2) alon]
    [else
     (local ((define pivot (first alon)))
       (append (quick-sort (smaller-items alon pivot))
               (list pivot)
               (quick-sort (larger-items alon pivot))))]))

(define (smaller-items l n)
  (extract l n <))
(define (larger-items l n)
  (extract l n >))
(define (extract l n cmp)
  (cond
    [(empty? l) '()]
    [else (if (cmp (first l) n)
              (cons (first l) (extract (rest l) n cmp))
              (extract (rest l) n cmp))]))
; exercise 401              
(define (quick-sort.v2 alon)
  (cond
    [(< (length alon) 20) (sort alon <)]
    [else
     (local ((define pivot (first alon)))
       (append (quick-sort (smaller-items alon pivot))
               (list pivot)
               (quick-sort (larger-items alon pivot))))]))
; exervise 402
(define (quick-sort.v3 alon)
  (cond
    [(< (length alon) 2) alon]
    [else
     (local ((define pivot (first alon)))
       (append (quick-sort (smaller-items (rest alon) pivot))
               (list pivot)
               (quick-sort (larger-items (rest alon) pivot))))]))
; exercise 403
(define (smaller-items.v2 l p)
  (filter (lambda (x) (< x p)) l))
(define (larger-items.v2 l p)
  (filter (lambda (x) (> x p)) l))
  
; exercise 404
(define (quick-sort alon)
  (cond
    [(< (length alon) 2) alon]
    [else
     (local ((define pivot (first alon))
             (define (compare l p cmp)
               (filter (lambda (x) (cmp x p)) l)))
       (append (quick-sort (compare (rest alon) pivot <))
               (list pivot)
               (quick-sort (compare (rest alon) pivot >=))))]))
