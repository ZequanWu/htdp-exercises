; exercise 378
(define (merge l1 l2)
  (cond
    [(empty? l1) l2]
    [(empty? l2) l1]
    [else (if (> (first l1) (first l2))
              (cons (first l2) (merge l1 (rest l2)))
              (cons (first l1) (merge l2 (rest l1))))]))
; exercise 379
(define (drop l n)
  (cond
    [(or (zero? n) (empty? l)) l]
    [else (drop (rest l) (sub1 n))]))

(define (take l n)
  (cond
    [(or (zero? n) (empty? l)) '()]
    [else (cons (first l)
                (take (rest l) (sub1 n)))]))

; exercise 381
(define-struct card [number hours])
(define-struct employee [name number payrate])
(define-struct wages [name wage])
(define (wages*.v3 loe loc)
  (local ((define (get-pay n hours loe)
            (for/or ((x loe) (y loe))
              (if (= n (employee-number x))
                  (make-wages (employee-name x)
                              (* (employee-payrate x)
                                 hours))
                  false)))
          (define (get-wages loe loc)
            (cond
              [(or (empty? loe) (empty? loc)) '()]
              [else
               (cons
                (get-pay (card-number (first loc))
                         (card-hours (first loc))
                         loe)
                (get-wages loe (rest loc)))])))
    (get-wages loe loc)))
    
; exercise 382
(define (value l1 l2)
  (for/sum ((x l1) (y l2))
    (* x y)))
    
; exercise 383
; [List-of X] -> X 
; returns a random item from the list 
; assume the list is not empty 
(define (random-pick l)
  (list-ref (random (length l)) l))
  
; [List-of String] [List-of [List-of String]] 
; -> [List-of [List-of String]]
; produces the list of those lists in ll that do not agree 
; with names at any place 
(define (non-same names ll)
  (cond
    [(empty? ll) '()]
    [else (if (equal? names (first ll))
              (rest ll)
              (cons (first ll)
                    (non-same names (rest ll))))]))
